#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include <sys/wait.h>

#define NUM_CHILDREN 3

void sigint_handler(int sig) {
    printf("Interrupt signal received. Exiting program.\n");
    exit(0);
}

int main(void) {
    // set up signal handler for SIGINT
    struct sigaction sa;
    sa.sa_handler = sigint_handler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    if (sigaction(SIGINT, &sa, NULL) == -1) {
        perror("sigaction");
        return 1;
    }

    // create pipes
    int fd[NUM_CHILDREN][2];
    for (int i = 0; i < NUM_CHILDREN; i++) {
        if (pipe(fd[i]) == -1) {
            perror("pipe");
            return 1;
        }
    }

    // fork child processes
    pid_t pid;
    for (int i = 0; i < NUM_CHILDREN; i++) {
        pid = fork();
        if (pid == -1) {
            perror("fork");
            return 1;
        } else if (pid == 0) {
            // child process
            close(fd[i][1]); // close write end of pipe
            char message[100];
            int bytes_read = read(fd[i][0], message, sizeof(message));
            if (bytes_read == -1) {
                perror("read");
                return 1;
            }
            printf("\nChild %d received message: %s\n", i+1, message);
            exit(0);
        } else {
            // parent process
            close(fd[i][0]); // close read end of pipe
            char message[100];
            printf("Enter a message to send to child %d: ", i+1);
            scanf("%s", message);
            if (write(fd[i][1], message, strlen(message)+1) == -1) {
                perror("write");
                return 1;
            }
        }
    }

    // wait for child processes to exit
    int status;
    for (int i = 0; i < NUM_CHILDREN; i++) {
        if (waitpid(pid, &status, 0) == -1) {
            perror("waitpid");
            return 1;
        }
    }

    return 0;
}
